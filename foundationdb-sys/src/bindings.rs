/* automatically generated by rust-bindgen */

pub const FDB_API_VERSION: u32 = 510;
pub const _STDINT_H: u32 = 1;
pub const _FEATURES_H: u32 = 1;
pub const _DEFAULT_SOURCE: u32 = 1;
pub const __USE_ISOC11: u32 = 1;
pub const __USE_ISOC99: u32 = 1;
pub const __USE_ISOC95: u32 = 1;
pub const __USE_POSIX_IMPLICITLY: u32 = 1;
pub const _POSIX_SOURCE: u32 = 1;
pub const _POSIX_C_SOURCE: u32 = 200809;
pub const __USE_POSIX: u32 = 1;
pub const __USE_POSIX2: u32 = 1;
pub const __USE_POSIX199309: u32 = 1;
pub const __USE_POSIX199506: u32 = 1;
pub const __USE_XOPEN2K: u32 = 1;
pub const __USE_XOPEN2K8: u32 = 1;
pub const _ATFILE_SOURCE: u32 = 1;
pub const __USE_MISC: u32 = 1;
pub const __USE_ATFILE: u32 = 1;
pub const __USE_FORTIFY_LEVEL: u32 = 0;
pub const __GLIBC_USE_DEPRECATED_GETS: u32 = 0;
pub const _STDC_PREDEF_H: u32 = 1;
pub const __STDC_IEC_559__: u32 = 1;
pub const __STDC_IEC_559_COMPLEX__: u32 = 1;
pub const __STDC_ISO_10646__: u32 = 201706;
pub const __STDC_NO_THREADS__: u32 = 1;
pub const __GNU_LIBRARY__: u32 = 6;
pub const __GLIBC__: u32 = 2;
pub const __GLIBC_MINOR__: u32 = 27;
pub const _SYS_CDEFS_H: u32 = 1;
pub const __glibc_c99_flexarr_available: u32 = 1;
pub const __WORDSIZE: u32 = 64;
pub const __WORDSIZE_TIME64_COMPAT32: u32 = 1;
pub const __SYSCALL_WORDSIZE: u32 = 64;
pub const __HAVE_GENERIC_SELECTION: u32 = 1;
pub const __GLIBC_USE_LIB_EXT2: u32 = 0;
pub const __GLIBC_USE_IEC_60559_BFP_EXT: u32 = 0;
pub const __GLIBC_USE_IEC_60559_FUNCS_EXT: u32 = 0;
pub const __GLIBC_USE_IEC_60559_TYPES_EXT: u32 = 0;
pub const _BITS_TYPES_H: u32 = 1;
pub const _BITS_TYPESIZES_H: u32 = 1;
pub const __OFF_T_MATCHES_OFF64_T: u32 = 1;
pub const __INO_T_MATCHES_INO64_T: u32 = 1;
pub const __RLIM_T_MATCHES_RLIM64_T: u32 = 1;
pub const __FD_SETSIZE: u32 = 1024;
pub const _BITS_WCHAR_H: u32 = 1;
pub const _BITS_STDINT_INTN_H: u32 = 1;
pub const _BITS_STDINT_UINTN_H: u32 = 1;
pub const INT8_MIN: i32 = -128;
pub const INT16_MIN: i32 = -32768;
pub const INT32_MIN: i32 = -2147483648;
pub const INT8_MAX: u32 = 127;
pub const INT16_MAX: u32 = 32767;
pub const INT32_MAX: u32 = 2147483647;
pub const UINT8_MAX: u32 = 255;
pub const UINT16_MAX: u32 = 65535;
pub const UINT32_MAX: u32 = 4294967295;
pub const INT_LEAST8_MIN: i32 = -128;
pub const INT_LEAST16_MIN: i32 = -32768;
pub const INT_LEAST32_MIN: i32 = -2147483648;
pub const INT_LEAST8_MAX: u32 = 127;
pub const INT_LEAST16_MAX: u32 = 32767;
pub const INT_LEAST32_MAX: u32 = 2147483647;
pub const UINT_LEAST8_MAX: u32 = 255;
pub const UINT_LEAST16_MAX: u32 = 65535;
pub const UINT_LEAST32_MAX: u32 = 4294967295;
pub const INT_FAST8_MIN: i32 = -128;
pub const INT_FAST16_MIN: i64 = -9223372036854775808;
pub const INT_FAST32_MIN: i64 = -9223372036854775808;
pub const INT_FAST8_MAX: u32 = 127;
pub const INT_FAST16_MAX: u64 = 9223372036854775807;
pub const INT_FAST32_MAX: u64 = 9223372036854775807;
pub const UINT_FAST8_MAX: u32 = 255;
pub const UINT_FAST16_MAX: i32 = -1;
pub const UINT_FAST32_MAX: i32 = -1;
pub const INTPTR_MIN: i64 = -9223372036854775808;
pub const INTPTR_MAX: u64 = 9223372036854775807;
pub const UINTPTR_MAX: i32 = -1;
pub const PTRDIFF_MIN: i64 = -9223372036854775808;
pub const PTRDIFF_MAX: u64 = 9223372036854775807;
pub const SIG_ATOMIC_MIN: i32 = -2147483648;
pub const SIG_ATOMIC_MAX: u32 = 2147483647;
pub const SIZE_MAX: i32 = -1;
pub const WINT_MIN: u32 = 0;
pub const WINT_MAX: u32 = 4294967295;
pub type __u_char = ::std::os::raw::c_uchar;
pub type __u_short = ::std::os::raw::c_ushort;
pub type __u_int = ::std::os::raw::c_uint;
pub type __u_long = ::std::os::raw::c_ulong;
pub type __int8_t = ::std::os::raw::c_schar;
pub type __uint8_t = ::std::os::raw::c_uchar;
pub type __int16_t = ::std::os::raw::c_short;
pub type __uint16_t = ::std::os::raw::c_ushort;
pub type __int32_t = ::std::os::raw::c_int;
pub type __uint32_t = ::std::os::raw::c_uint;
pub type __int64_t = ::std::os::raw::c_long;
pub type __uint64_t = ::std::os::raw::c_ulong;
pub type __quad_t = ::std::os::raw::c_long;
pub type __u_quad_t = ::std::os::raw::c_ulong;
pub type __intmax_t = ::std::os::raw::c_long;
pub type __uintmax_t = ::std::os::raw::c_ulong;
pub type __dev_t = ::std::os::raw::c_ulong;
pub type __uid_t = ::std::os::raw::c_uint;
pub type __gid_t = ::std::os::raw::c_uint;
pub type __ino_t = ::std::os::raw::c_ulong;
pub type __ino64_t = ::std::os::raw::c_ulong;
pub type __mode_t = ::std::os::raw::c_uint;
pub type __nlink_t = ::std::os::raw::c_ulong;
pub type __off_t = ::std::os::raw::c_long;
pub type __off64_t = ::std::os::raw::c_long;
pub type __pid_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __fsid_t {
    pub __val: [::std::os::raw::c_int; 2usize],
}
#[test]
fn bindgen_test_layout___fsid_t() {
    assert_eq!(
        ::std::mem::size_of::<__fsid_t>(),
        8usize,
        concat!("Size of: ", stringify!(__fsid_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__fsid_t>(),
        4usize,
        concat!("Alignment of ", stringify!(__fsid_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__fsid_t>())).__val as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__fsid_t),
            "::",
            stringify!(__val)
        )
    );
}
pub type __clock_t = ::std::os::raw::c_long;
pub type __rlim_t = ::std::os::raw::c_ulong;
pub type __rlim64_t = ::std::os::raw::c_ulong;
pub type __id_t = ::std::os::raw::c_uint;
pub type __time_t = ::std::os::raw::c_long;
pub type __useconds_t = ::std::os::raw::c_uint;
pub type __suseconds_t = ::std::os::raw::c_long;
pub type __daddr_t = ::std::os::raw::c_int;
pub type __key_t = ::std::os::raw::c_int;
pub type __clockid_t = ::std::os::raw::c_int;
pub type __timer_t = *mut ::std::os::raw::c_void;
pub type __blksize_t = ::std::os::raw::c_long;
pub type __blkcnt_t = ::std::os::raw::c_long;
pub type __blkcnt64_t = ::std::os::raw::c_long;
pub type __fsblkcnt_t = ::std::os::raw::c_ulong;
pub type __fsblkcnt64_t = ::std::os::raw::c_ulong;
pub type __fsfilcnt_t = ::std::os::raw::c_ulong;
pub type __fsfilcnt64_t = ::std::os::raw::c_ulong;
pub type __fsword_t = ::std::os::raw::c_long;
pub type __ssize_t = ::std::os::raw::c_long;
pub type __syscall_slong_t = ::std::os::raw::c_long;
pub type __syscall_ulong_t = ::std::os::raw::c_ulong;
pub type __loff_t = __off64_t;
pub type __caddr_t = *mut ::std::os::raw::c_char;
pub type __intptr_t = ::std::os::raw::c_long;
pub type __socklen_t = ::std::os::raw::c_uint;
pub type __sig_atomic_t = ::std::os::raw::c_int;
pub type int_least8_t = ::std::os::raw::c_schar;
pub type int_least16_t = ::std::os::raw::c_short;
pub type int_least32_t = ::std::os::raw::c_int;
pub type int_least64_t = ::std::os::raw::c_long;
pub type uint_least8_t = ::std::os::raw::c_uchar;
pub type uint_least16_t = ::std::os::raw::c_ushort;
pub type uint_least32_t = ::std::os::raw::c_uint;
pub type uint_least64_t = ::std::os::raw::c_ulong;
pub type int_fast8_t = ::std::os::raw::c_schar;
pub type int_fast16_t = ::std::os::raw::c_long;
pub type int_fast32_t = ::std::os::raw::c_long;
pub type int_fast64_t = ::std::os::raw::c_long;
pub type uint_fast8_t = ::std::os::raw::c_uchar;
pub type uint_fast16_t = ::std::os::raw::c_ulong;
pub type uint_fast32_t = ::std::os::raw::c_ulong;
pub type uint_fast64_t = ::std::os::raw::c_ulong;
pub type intmax_t = __intmax_t;
pub type uintmax_t = __uintmax_t;
pub const FDBNetworkOption_FDB_NET_OPTION_LOCAL_ADDRESS: FDBNetworkOption = 10;
pub const FDBNetworkOption_FDB_NET_OPTION_CLUSTER_FILE: FDBNetworkOption = 20;
pub const FDBNetworkOption_FDB_NET_OPTION_TRACE_ENABLE: FDBNetworkOption = 30;
pub const FDBNetworkOption_FDB_NET_OPTION_TRACE_ROLL_SIZE: FDBNetworkOption = 31;
pub const FDBNetworkOption_FDB_NET_OPTION_TRACE_MAX_LOGS_SIZE: FDBNetworkOption = 32;
pub const FDBNetworkOption_FDB_NET_OPTION_TRACE_LOG_GROUP: FDBNetworkOption = 33;
pub const FDBNetworkOption_FDB_NET_OPTION_KNOB: FDBNetworkOption = 40;
pub const FDBNetworkOption_FDB_NET_OPTION_TLS_PLUGIN: FDBNetworkOption = 41;
pub const FDBNetworkOption_FDB_NET_OPTION_TLS_CERT_BYTES: FDBNetworkOption = 42;
pub const FDBNetworkOption_FDB_NET_OPTION_TLS_CERT_PATH: FDBNetworkOption = 43;
pub const FDBNetworkOption_FDB_NET_OPTION_TLS_KEY_BYTES: FDBNetworkOption = 45;
pub const FDBNetworkOption_FDB_NET_OPTION_TLS_KEY_PATH: FDBNetworkOption = 46;
pub const FDBNetworkOption_FDB_NET_OPTION_TLS_VERIFY_PEERS: FDBNetworkOption = 47;
pub const FDBNetworkOption_FDB_NET_OPTION_BUGGIFY_ENABLE: FDBNetworkOption = 48;
pub const FDBNetworkOption_FDB_NET_OPTION_BUGGIFY_DISABLE: FDBNetworkOption = 49;
pub const FDBNetworkOption_FDB_NET_OPTION_BUGGIFY_SECTION_ACTIVATED_PROBABILITY: FDBNetworkOption =
    50;
pub const FDBNetworkOption_FDB_NET_OPTION_BUGGIFY_SECTION_FIRED_PROBABILITY: FDBNetworkOption = 51;
pub const FDBNetworkOption_FDB_NET_OPTION_DISABLE_MULTI_VERSION_CLIENT_API: FDBNetworkOption = 60;
pub const FDBNetworkOption_FDB_NET_OPTION_CALLBACKS_ON_EXTERNAL_THREADS: FDBNetworkOption = 61;
pub const FDBNetworkOption_FDB_NET_OPTION_EXTERNAL_CLIENT_LIBRARY: FDBNetworkOption = 62;
pub const FDBNetworkOption_FDB_NET_OPTION_EXTERNAL_CLIENT_DIRECTORY: FDBNetworkOption = 63;
pub const FDBNetworkOption_FDB_NET_OPTION_DISABLE_LOCAL_CLIENT: FDBNetworkOption = 64;
pub const FDBNetworkOption_FDB_NET_OPTION_DISABLE_CLIENT_STATISTICS_LOGGING: FDBNetworkOption = 70;
pub const FDBNetworkOption_FDB_NET_OPTION_ENABLE_SLOW_TASK_PROFILING: FDBNetworkOption = 71;
pub type FDBNetworkOption = u32;
pub const FDBClusterOption_FDB_CLUSTER_OPTION_DUMMY_DO_NOT_USE: FDBClusterOption = -1;
pub type FDBClusterOption = i32;
pub const FDBDatabaseOption_FDB_DB_OPTION_LOCATION_CACHE_SIZE: FDBDatabaseOption = 10;
pub const FDBDatabaseOption_FDB_DB_OPTION_MAX_WATCHES: FDBDatabaseOption = 20;
pub const FDBDatabaseOption_FDB_DB_OPTION_MACHINE_ID: FDBDatabaseOption = 21;
pub const FDBDatabaseOption_FDB_DB_OPTION_DATACENTER_ID: FDBDatabaseOption = 22;
pub type FDBDatabaseOption = u32;
pub const FDBTransactionOption_FDB_TR_OPTION_CAUSAL_WRITE_RISKY: FDBTransactionOption = 10;
pub const FDBTransactionOption_FDB_TR_OPTION_CAUSAL_READ_RISKY: FDBTransactionOption = 20;
pub const FDBTransactionOption_FDB_TR_OPTION_CAUSAL_READ_DISABLE: FDBTransactionOption = 21;
pub const FDBTransactionOption_FDB_TR_OPTION_NEXT_WRITE_NO_WRITE_CONFLICT_RANGE:
    FDBTransactionOption = 30;
pub const FDBTransactionOption_FDB_TR_OPTION_COMMIT_ON_FIRST_PROXY: FDBTransactionOption = 40;
pub const FDBTransactionOption_FDB_TR_OPTION_CHECK_WRITES_ENABLE: FDBTransactionOption = 50;
pub const FDBTransactionOption_FDB_TR_OPTION_READ_YOUR_WRITES_DISABLE: FDBTransactionOption = 51;
pub const FDBTransactionOption_FDB_TR_OPTION_READ_AHEAD_DISABLE: FDBTransactionOption = 52;
pub const FDBTransactionOption_FDB_TR_OPTION_DURABILITY_DATACENTER: FDBTransactionOption = 110;
pub const FDBTransactionOption_FDB_TR_OPTION_DURABILITY_RISKY: FDBTransactionOption = 120;
pub const FDBTransactionOption_FDB_TR_OPTION_DURABILITY_DEV_NULL_IS_WEB_SCALE:
    FDBTransactionOption = 130;
pub const FDBTransactionOption_FDB_TR_OPTION_PRIORITY_SYSTEM_IMMEDIATE: FDBTransactionOption = 200;
pub const FDBTransactionOption_FDB_TR_OPTION_PRIORITY_BATCH: FDBTransactionOption = 201;
pub const FDBTransactionOption_FDB_TR_OPTION_INITIALIZE_NEW_DATABASE: FDBTransactionOption = 300;
pub const FDBTransactionOption_FDB_TR_OPTION_ACCESS_SYSTEM_KEYS: FDBTransactionOption = 301;
pub const FDBTransactionOption_FDB_TR_OPTION_READ_SYSTEM_KEYS: FDBTransactionOption = 302;
pub const FDBTransactionOption_FDB_TR_OPTION_DEBUG_DUMP: FDBTransactionOption = 400;
pub const FDBTransactionOption_FDB_TR_OPTION_DEBUG_RETRY_LOGGING: FDBTransactionOption = 401;
pub const FDBTransactionOption_FDB_TR_OPTION_TRANSACTION_LOGGING_ENABLE: FDBTransactionOption = 402;
pub const FDBTransactionOption_FDB_TR_OPTION_TIMEOUT: FDBTransactionOption = 500;
pub const FDBTransactionOption_FDB_TR_OPTION_RETRY_LIMIT: FDBTransactionOption = 501;
pub const FDBTransactionOption_FDB_TR_OPTION_MAX_RETRY_DELAY: FDBTransactionOption = 502;
pub const FDBTransactionOption_FDB_TR_OPTION_SNAPSHOT_RYW_ENABLE: FDBTransactionOption = 600;
pub const FDBTransactionOption_FDB_TR_OPTION_SNAPSHOT_RYW_DISABLE: FDBTransactionOption = 601;
pub const FDBTransactionOption_FDB_TR_OPTION_LOCK_AWARE: FDBTransactionOption = 700;
pub const FDBTransactionOption_FDB_TR_OPTION_USED_DURING_COMMIT_PROTECTION_DISABLE:
    FDBTransactionOption = 701;
pub const FDBTransactionOption_FDB_TR_OPTION_READ_LOCK_AWARE: FDBTransactionOption = 702;
pub type FDBTransactionOption = u32;
pub const FDBStreamingMode_FDB_STREAMING_MODE_WANT_ALL: FDBStreamingMode = -2;
pub const FDBStreamingMode_FDB_STREAMING_MODE_ITERATOR: FDBStreamingMode = -1;
pub const FDBStreamingMode_FDB_STREAMING_MODE_EXACT: FDBStreamingMode = 0;
pub const FDBStreamingMode_FDB_STREAMING_MODE_SMALL: FDBStreamingMode = 1;
pub const FDBStreamingMode_FDB_STREAMING_MODE_MEDIUM: FDBStreamingMode = 2;
pub const FDBStreamingMode_FDB_STREAMING_MODE_LARGE: FDBStreamingMode = 3;
pub const FDBStreamingMode_FDB_STREAMING_MODE_SERIAL: FDBStreamingMode = 4;
pub type FDBStreamingMode = i32;
pub const FDBMutationType_FDB_MUTATION_TYPE_ADD: FDBMutationType = 2;
pub const FDBMutationType_FDB_MUTATION_TYPE_AND: FDBMutationType = 6;
pub const FDBMutationType_FDB_MUTATION_TYPE_BIT_AND: FDBMutationType = 6;
pub const FDBMutationType_FDB_MUTATION_TYPE_OR: FDBMutationType = 7;
pub const FDBMutationType_FDB_MUTATION_TYPE_BIT_OR: FDBMutationType = 7;
pub const FDBMutationType_FDB_MUTATION_TYPE_XOR: FDBMutationType = 8;
pub const FDBMutationType_FDB_MUTATION_TYPE_BIT_XOR: FDBMutationType = 8;
pub const FDBMutationType_FDB_MUTATION_TYPE_MAX: FDBMutationType = 12;
pub const FDBMutationType_FDB_MUTATION_TYPE_MIN: FDBMutationType = 13;
pub const FDBMutationType_FDB_MUTATION_TYPE_SET_VERSIONSTAMPED_KEY: FDBMutationType = 14;
pub const FDBMutationType_FDB_MUTATION_TYPE_SET_VERSIONSTAMPED_VALUE: FDBMutationType = 15;
pub const FDBMutationType_FDB_MUTATION_TYPE_BYTE_MIN: FDBMutationType = 16;
pub const FDBMutationType_FDB_MUTATION_TYPE_BYTE_MAX: FDBMutationType = 17;
pub type FDBMutationType = u32;
pub const FDBConflictRangeType_FDB_CONFLICT_RANGE_TYPE_READ: FDBConflictRangeType = 0;
pub const FDBConflictRangeType_FDB_CONFLICT_RANGE_TYPE_WRITE: FDBConflictRangeType = 1;
pub type FDBConflictRangeType = u32;
pub const FDBErrorPredicate_FDB_ERROR_PREDICATE_RETRYABLE: FDBErrorPredicate = 50000;
pub const FDBErrorPredicate_FDB_ERROR_PREDICATE_MAYBE_COMMITTED: FDBErrorPredicate = 50001;
pub const FDBErrorPredicate_FDB_ERROR_PREDICATE_RETRYABLE_NOT_COMMITTED: FDBErrorPredicate = 50002;
pub type FDBErrorPredicate = u32;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct future {
    _unused: [u8; 0],
}
pub type FDBFuture = future;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct cluster {
    _unused: [u8; 0],
}
pub type FDBCluster = cluster;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct database {
    _unused: [u8; 0],
}
pub type FDBDatabase = database;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct transaction {
    _unused: [u8; 0],
}
pub type FDBTransaction = transaction;
pub type fdb_error_t = ::std::os::raw::c_int;
pub type fdb_bool_t = ::std::os::raw::c_int;
extern "C" {
    pub fn fdb_get_error(code: fdb_error_t) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn fdb_error_predicate(
        predicate_test: ::std::os::raw::c_int,
        code: fdb_error_t,
    ) -> fdb_bool_t;
}
extern "C" {
    pub fn fdb_network_set_option(
        option: FDBNetworkOption,
        value: *const u8,
        value_length: ::std::os::raw::c_int,
    ) -> fdb_error_t;
}
extern "C" {
    pub fn fdb_setup_network() -> fdb_error_t;
}
extern "C" {
    pub fn fdb_run_network() -> fdb_error_t;
}
extern "C" {
    pub fn fdb_stop_network() -> fdb_error_t;
}
extern "C" {
    pub fn fdb_add_network_thread_completion_hook(
        hook: ::std::option::Option<unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void)>,
        hook_parameter: *mut ::std::os::raw::c_void,
    ) -> fdb_error_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct keyvalue {
    pub _bindgen_opaque_blob: [u32; 6usize],
}
#[test]
fn bindgen_test_layout_keyvalue() {
    assert_eq!(
        ::std::mem::size_of::<keyvalue>(),
        24usize,
        concat!("Size of: ", stringify!(keyvalue))
    );
    assert_eq!(
        ::std::mem::align_of::<keyvalue>(),
        4usize,
        concat!("Alignment of ", stringify!(keyvalue))
    );
}
pub type FDBKeyValue = keyvalue;
extern "C" {
    pub fn fdb_future_cancel(f: *mut FDBFuture);
}
extern "C" {
    pub fn fdb_future_release_memory(f: *mut FDBFuture);
}
extern "C" {
    pub fn fdb_future_destroy(f: *mut FDBFuture);
}
extern "C" {
    pub fn fdb_future_block_until_ready(f: *mut FDBFuture) -> fdb_error_t;
}
extern "C" {
    pub fn fdb_future_is_ready(f: *mut FDBFuture) -> fdb_bool_t;
}
pub type FDBCallback = ::std::option::Option<
    unsafe extern "C" fn(future: *mut FDBFuture, callback_parameter: *mut ::std::os::raw::c_void),
>;
extern "C" {
    pub fn fdb_future_set_callback(
        f: *mut FDBFuture,
        callback: FDBCallback,
        callback_parameter: *mut ::std::os::raw::c_void,
    ) -> fdb_error_t;
}
extern "C" {
    pub fn fdb_future_get_error(f: *mut FDBFuture) -> fdb_error_t;
}
extern "C" {
    pub fn fdb_future_get_version(f: *mut FDBFuture, out_version: *mut i64) -> fdb_error_t;
}
extern "C" {
    pub fn fdb_future_get_key(
        f: *mut FDBFuture,
        out_key: *mut *const u8,
        out_key_length: *mut ::std::os::raw::c_int,
    ) -> fdb_error_t;
}
extern "C" {
    pub fn fdb_future_get_cluster(
        f: *mut FDBFuture,
        out_cluster: *mut *mut FDBCluster,
    ) -> fdb_error_t;
}
extern "C" {
    pub fn fdb_future_get_database(
        f: *mut FDBFuture,
        out_database: *mut *mut FDBDatabase,
    ) -> fdb_error_t;
}
extern "C" {
    pub fn fdb_future_get_value(
        f: *mut FDBFuture,
        out_present: *mut fdb_bool_t,
        out_value: *mut *const u8,
        out_value_length: *mut ::std::os::raw::c_int,
    ) -> fdb_error_t;
}
extern "C" {
    pub fn fdb_future_get_keyvalue_array(
        f: *mut FDBFuture,
        out_kv: *mut *const FDBKeyValue,
        out_count: *mut ::std::os::raw::c_int,
        out_more: *mut fdb_bool_t,
    ) -> fdb_error_t;
}
extern "C" {
    pub fn fdb_future_get_string_array(
        f: *mut FDBFuture,
        out_strings: *mut *mut *const ::std::os::raw::c_char,
        out_count: *mut ::std::os::raw::c_int,
    ) -> fdb_error_t;
}
extern "C" {
    pub fn fdb_create_cluster(cluster_file_path: *const ::std::os::raw::c_char) -> *mut FDBFuture;
}
extern "C" {
    pub fn fdb_cluster_destroy(c: *mut FDBCluster);
}
extern "C" {
    pub fn fdb_cluster_set_option(
        c: *mut FDBCluster,
        option: FDBClusterOption,
        value: *const u8,
        value_length: ::std::os::raw::c_int,
    ) -> fdb_error_t;
}
extern "C" {
    pub fn fdb_cluster_create_database(
        c: *mut FDBCluster,
        db_name: *const u8,
        db_name_length: ::std::os::raw::c_int,
    ) -> *mut FDBFuture;
}
extern "C" {
    pub fn fdb_database_destroy(d: *mut FDBDatabase);
}
extern "C" {
    pub fn fdb_database_set_option(
        d: *mut FDBDatabase,
        option: FDBDatabaseOption,
        value: *const u8,
        value_length: ::std::os::raw::c_int,
    ) -> fdb_error_t;
}
extern "C" {
    pub fn fdb_database_create_transaction(
        d: *mut FDBDatabase,
        out_transaction: *mut *mut FDBTransaction,
    ) -> fdb_error_t;
}
extern "C" {
    pub fn fdb_transaction_destroy(tr: *mut FDBTransaction);
}
extern "C" {
    pub fn fdb_transaction_cancel(tr: *mut FDBTransaction);
}
extern "C" {
    pub fn fdb_transaction_set_option(
        tr: *mut FDBTransaction,
        option: FDBTransactionOption,
        value: *const u8,
        value_length: ::std::os::raw::c_int,
    ) -> fdb_error_t;
}
extern "C" {
    pub fn fdb_transaction_set_read_version(tr: *mut FDBTransaction, version: i64);
}
extern "C" {
    pub fn fdb_transaction_get_read_version(tr: *mut FDBTransaction) -> *mut FDBFuture;
}
extern "C" {
    pub fn fdb_transaction_get(
        tr: *mut FDBTransaction,
        key_name: *const u8,
        key_name_length: ::std::os::raw::c_int,
        snapshot: fdb_bool_t,
    ) -> *mut FDBFuture;
}
extern "C" {
    pub fn fdb_transaction_get_key(
        tr: *mut FDBTransaction,
        key_name: *const u8,
        key_name_length: ::std::os::raw::c_int,
        or_equal: fdb_bool_t,
        offset: ::std::os::raw::c_int,
        snapshot: fdb_bool_t,
    ) -> *mut FDBFuture;
}
extern "C" {
    pub fn fdb_transaction_get_addresses_for_key(
        tr: *mut FDBTransaction,
        key_name: *const u8,
        key_name_length: ::std::os::raw::c_int,
    ) -> *mut FDBFuture;
}
extern "C" {
    pub fn fdb_transaction_get_range(
        tr: *mut FDBTransaction,
        begin_key_name: *const u8,
        begin_key_name_length: ::std::os::raw::c_int,
        begin_or_equal: fdb_bool_t,
        begin_offset: ::std::os::raw::c_int,
        end_key_name: *const u8,
        end_key_name_length: ::std::os::raw::c_int,
        end_or_equal: fdb_bool_t,
        end_offset: ::std::os::raw::c_int,
        limit: ::std::os::raw::c_int,
        target_bytes: ::std::os::raw::c_int,
        mode: FDBStreamingMode,
        iteration: ::std::os::raw::c_int,
        snapshot: fdb_bool_t,
        reverse: fdb_bool_t,
    ) -> *mut FDBFuture;
}
extern "C" {
    pub fn fdb_transaction_set(
        tr: *mut FDBTransaction,
        key_name: *const u8,
        key_name_length: ::std::os::raw::c_int,
        value: *const u8,
        value_length: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn fdb_transaction_atomic_op(
        tr: *mut FDBTransaction,
        key_name: *const u8,
        key_name_length: ::std::os::raw::c_int,
        param: *const u8,
        param_length: ::std::os::raw::c_int,
        operation_type: FDBMutationType,
    );
}
extern "C" {
    pub fn fdb_transaction_clear(
        tr: *mut FDBTransaction,
        key_name: *const u8,
        key_name_length: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn fdb_transaction_clear_range(
        tr: *mut FDBTransaction,
        begin_key_name: *const u8,
        begin_key_name_length: ::std::os::raw::c_int,
        end_key_name: *const u8,
        end_key_name_length: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn fdb_transaction_watch(
        tr: *mut FDBTransaction,
        key_name: *const u8,
        key_name_length: ::std::os::raw::c_int,
    ) -> *mut FDBFuture;
}
extern "C" {
    pub fn fdb_transaction_commit(tr: *mut FDBTransaction) -> *mut FDBFuture;
}
extern "C" {
    pub fn fdb_transaction_get_committed_version(
        tr: *mut FDBTransaction,
        out_version: *mut i64,
    ) -> fdb_error_t;
}
extern "C" {
    pub fn fdb_transaction_get_versionstamp(tr: *mut FDBTransaction) -> *mut FDBFuture;
}
extern "C" {
    pub fn fdb_transaction_on_error(tr: *mut FDBTransaction, error: fdb_error_t) -> *mut FDBFuture;
}
extern "C" {
    pub fn fdb_transaction_reset(tr: *mut FDBTransaction);
}
extern "C" {
    pub fn fdb_transaction_add_conflict_range(
        tr: *mut FDBTransaction,
        begin_key_name: *const u8,
        begin_key_name_length: ::std::os::raw::c_int,
        end_key_name: *const u8,
        end_key_name_length: ::std::os::raw::c_int,
        type_: FDBConflictRangeType,
    ) -> fdb_error_t;
}
extern "C" {
    pub fn fdb_select_api_version_impl(
        runtime_version: ::std::os::raw::c_int,
        header_version: ::std::os::raw::c_int,
    ) -> fdb_error_t;
}
extern "C" {
    pub fn fdb_get_max_api_version() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fdb_get_client_version() -> *const ::std::os::raw::c_char;
}
