sudo: required
dist: xenial
language: rust

matrix:
  include:
    # optional feature variations
    # we want full coverage, include all features...
    - rust: stable
      env: NAME=stable
           RUST_BACKTRACE=full

    - rust: beta
      env: NAME=beta
           RUST_BACKTRACE=full

    - os: osx
      rust: stable
      env: NAME=macos
           RUST_BACKTRACE=full

    - os: windows
      rust: stable
      env: NAME=windows
           RUST_BACKTRACE=full

    - rust: nightly
      env: RUST_BACKTRACE=full

    - rust: nightly
      env: NAME=clippy
           RUST_BACKTRACE=full
           CLIPPY=true
      script:
        - cargo clippy --all --all-features

    - rust: nightly
      env: NAME=rustfmt
           RUST_BACKTRACE=full
           RUSTFMT=true
      script:
        - rustup component add rustfmt-preview
        - cargo fmt --all -- --write-mode=diff

    ## bindingtester
    - rust: stable
      env: NAME=bindingtester
           RUST_BACKTRACE=full
      script:
        - cargo build -p foundationdb --bin bindingtester
        - scripts/run_bindingtester.sh

  allow_failures:
    - rust: nightly

before_install:
  - if [[ "$TRAVIS_OS_NAME" == "linux" ]]; then scripts/install_foundationdb_linux.sh ; fi
  - if [[ "$TRAVIS_OS_NAME" == "osx" ]]; then scripts/install_foundationdb_macos.sh ; fi
  - if [[ "$TRAVIS_OS_NAME" == "windows" ]]; then scripts/install_foundationdb_win64.sh ; export PATH="${PATH}:/c/Program Files/foundationdb/bin" ; fi
  - if [[ "$CLIPPY" == "true" ]]; then cargo install clippy --force ; fi

script:
  - cargo test --manifest-path foundationdb-sys/Cargo.toml
  - cargo test --manifest-path foundationdb-gen/Cargo.toml
  - cargo test --manifest-path foundationdb/Cargo.toml
  - cargo test --manifest-path foundationdb/Cargo.toml --no-default-features --features fdb-6_0
  - cargo test --manifest-path foundationdb-bench/Cargo.toml
  - cargo run --manifest-path foundationdb/Cargo.toml --example class-scheduling

# after_success: cargo kcov here...
